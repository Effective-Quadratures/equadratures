Defining a parameter
====================
A **parameter** is one of the main building blocks in Effective Quadratures. Let :math:`\zeta` be a parameter defined on a domain :math:`\mathcal{D} \in \mathbb{R}`. The support of the domain :math:`\mathcal{D}` may be:

* closed :math:`[a,b]`;
* semi-infinite :math:`(-\infty, b)` or :math:`[a, \infty)`;
* infinite :math:`(-\infty, \infty)`.

Further, let us assume that this parameter is characterized by a positive weight function :math:`\rho(\zeta)`, which may be interpreted as the probability density function (PDF) of :math:`\zeta`, which readily implies that 

.. math::

	\int_{\mathcal{D}}\rho\left(\zeta\right)d\zeta=1.

We now demonstrate some basic functionality of this parameter. First consider the case where :math:`\rho(\zeta) = \mathcal{N} (0, 1)` is a standard Gaussian distribution with a mean of 0.0 and a variance of 1.0. We then plot its PDF and cumulative density function (CDF) and demonstrate how we can generate random samples from this distribution.

.. code::

	from equadratures import *
	import numpy as np 

	zeta = Parameter(distribution='normal', shape_parameter_A = 0.0, shape_parameter_B = 1.0, order=3)

Now for some plots; first let us plot the PDF,

.. code::

	z, pdf = zeta.getPDF()
	z, cdf = zeta.getCDF()
	z_samples = zeta.getSamples(6000)
	
	fig = plt.figure()
	ax = fig.add_subplot(1,1,1)
	plt.plot(z, pdf, '-', c='crimson', lw=4)
	adjust_spines(ax, ['left', 'bottom'])
	ax.set_axisbelow(True)
	plt.xlabel('$\zeta$', fontsize=15)
	plt.ylabel('PDF', fontsize=15)
	plt.savefig('Fig_1.png', dpi=200, bbox_inches='tight')
	
	
.. figure:: Figures/Fig_1.png
   :scale: 30 %

   Figure. PDF of a standard Gaussian variable.

 
followed by the CDF.

.. code::
	
	fig = plt.figure()
	ax = fig.add_subplot(1,1,1)
	plt.plot(z, cdf, '-', c='navy', lw=4)
	adjust_spines(ax, ['left', 'bottom'])
	ax.set_axisbelow(True)
	plt.xlabel('$\zeta$', fontsize=15)
	plt.ylabel('CDF', fontsize=15)
	plt.savefig('Fig_2.png', dpi=200, bbox_inches='tight')

	
.. figure:: Figures/Fig_2.png
   :scale: 30 %

   Figure. CDF of a standard Gaussian variable.

Now, we will use the :code:`getSamples()` functionality to create a histogram.

.. code::

	fig = plt.figure()
	ax = fig.add_subplot(1,1,1)
	n, bins, patches = plt.hist(z_samples, 50, normed=1, facecolor='lime', alpha=0.75)
	adjust_spines(ax, ['left', 'bottom'])
	ax.set_axisbelow(True)
	plt.xlabel('$\zeta$', fontsize=18)
	plt.ylabel('PDF (Histogram)', fontsize=18)
	plt.savefig('Fig_3.png', dpi=200, bbox_inches='tight')


.. figure:: Figures/Fig_3.png
   :scale: 30 %

   Figure. Histogram of a standard Gaussian variable with 6000 samples.

One can repeat the above for a range of distributions. We provide a few additional definitions below.

.. code::

	zeta_1 = Parameter(distribution='uniform', lower=-1., upper=1., order=3)
	zeta_2 = Parameter(distribution='chebyshev', lower=-1., upper=1., order=3)
	zeta_3 = Parameter(distribution='gamma', shape_parameter_A=3.5, shape_parameter=2.0, order=4)
	zeta_4 = Parameter(distribution='beta', lower=0., upper=1., shape_parameter_A=1.7, shape_parameter_B=2.5, order=6)
	
Feel free to generate PDFs, CDFs and histograms using the above definitions. 